<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manajemen Proyek - Mirip ClickUp</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .gantt-chart-row-bar {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .task-card {
            cursor: grab;
        }
        .task-card:active {
            cursor: grabbing;
        }
        .calendar-day.has-task {
            position: relative;
        }
        .calendar-task {
            position: absolute;
            left: 2px;
            right: 2px;
            font-size: 0.7rem;
            padding: 2px;
            border-radius: 4px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            cursor: pointer;
        }
        .kanban-column {
            height: calc(100vh - 200px);
            overflow-y: auto;
        }
        .modal-enter {
            opacity: 0;
            transform: scale(0.95);
        }
        .modal-enter-active {
            opacity: 1;
            transform: scale(1);
            transition: all 0.2s ease-out;
        }
        .modal-leave-active {
            opacity: 0;
            transform: scale(0.95);
            transition: all 0.2s ease-in;
        }
        .resize-handle {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 8px;
            cursor: ew-resize;
            z-index: 10;
        }
        .resize-handle:hover {
             background-color: rgba(255, 255, 255, 0.3);
        }
        /* Toggle Switch Styles */
        .toggle-checkbox:checked {
            right: 0;
            border-color: #3b82f6;
        }
        .toggle-checkbox:checked + .toggle-label {
            background-color: #3b82f6;
        }
    </style>
</head>
<body class="flex h-screen">

    <!-- Sidebar -->
    <aside class="w-64 bg-white border-r border-gray-200 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-200">
            <h1 class="text-xl font-bold text-gray-800 flex items-center">
                <i class="fas fa-tasks mr-2 text-blue-500"></i>
                <span>ProyekMan</span>
            </h1>
        </div>
        <nav class="flex-1 p-4 space-y-2">
             <div>
                <a href="#" id="nav-link-projects" class="flex items-center px-2 py-2 text-gray-700 rounded-md hover:bg-gray-100">
                    <i class="fas fa-folder-open w-6 text-gray-400"></i>
                    <span class="ml-3 font-medium">Project</span>
                </a>
            </div>
            <div>
                 <a href="#" id="nav-link-timeboxing" class="flex items-center px-2 py-2 text-gray-700 rounded-md hover:bg-gray-100">
                    <i class="fas fa-stopwatch w-6 text-gray-400"></i>
                    <span class="ml-3 font-medium">Time Boxing</span>
                </a>
            </div>
        </nav>
        <div class="p-4 border-t border-gray-200">
             <div class="flex items-center">
                <img src="https://placehold.co/40x40/E2E8F0/4A5568?text=U" class="rounded-full mr-3" alt="User Avatar">
                <div>
                    <p class="font-semibold text-gray-700">Pengguna</p>
                    <a href="#" class="text-sm text-blue-500 hover:underline">Lihat Profil</a>
                </div>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main id="main-content" class="flex-1 p-6 md:p-8 overflow-auto">
        <!-- Konten akan dirender oleh JavaScript -->
    </main>

    <!-- Edit Project Modal -->
    <div id="edit-project-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="modal-content" class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md modal-enter">
            <h3 class="text-2xl font-bold mb-6 text-gray-800">Edit Proyek</h3>
            <form id="edit-project-form">
                <div class="mb-4">
                    <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">Nama Proyek</label>
                    <input type="text" id="projectName" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div class="mb-4">
                    <label for="projectStatus" class="block text-sm font-medium text-gray-700 mb-1">Status Proyek</label>
                    <select id="projectStatus" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white">
                        <!-- Options populated by JS -->
                    </select>
                </div>
                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label for="projectStartDate" class="block text-sm font-medium text-gray-700 mb-1">Tanggal Mulai</label>
                        <input type="date" id="projectStartDate" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="projectEndDate" class="block text-sm font-medium text-gray-700 mb-1">Tanggal Selesai</label>
                        <input type="date" id="projectEndDate" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancel-edit" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Batal</button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Simpan Perubahan</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Edit Task/Subtask Modal -->
    <div id="edit-task-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="task-modal-content" class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md modal-enter">
            <h3 class="text-2xl font-bold mb-6 text-gray-800" id="task-modal-title">Edit Tugas</h3>
            <form id="edit-task-form">
                <div class="mb-4">
                    <label for="taskName" class="block text-sm font-medium text-gray-700 mb-1">Nama Tugas</label>
                    <input type="text" id="taskName" required class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div class="mb-4">
                    <label for="taskAssignee" class="block text-sm font-medium text-gray-700 mb-1">Assignee</label>
                    <input type="text" id="taskAssignee" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label for="taskStartDate" class="block text-sm font-medium text-gray-700 mb-1">Tanggal Mulai</label>
                        <input type="date" id="taskStartDate" required class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="taskEndDate" class="block text-sm font-medium text-gray-700 mb-1">Tanggal Selesai</label>
                        <input type="date" id="taskEndDate" required class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>
                 <div class="flex justify-between items-center mt-6">
                    <div id="task-actions-container" class="flex gap-2">
                         <button type="button" id="move-to-project-btn" class="hidden px-4 py-2 bg-green-100 text-green-800 rounded-md hover:bg-green-200 text-sm flex items-center gap-2">
                            <i class="fas fa-folder-tree"></i>
                            <span>Pindahkan</span>
                        </button>
                        <button type="button" id="promote-task-btn" class="hidden px-4 py-2 bg-purple-100 text-purple-800 rounded-md hover:bg-purple-200 text-sm flex items-center gap-2">
                            <i class="fas fa-arrow-up"></i>
                            <span>Jadikan Tugas Utama</span>
                        </button>
                         <button type="button" id="make-subtask-btn" class="hidden px-4 py-2 bg-yellow-100 text-yellow-800 rounded-md hover:bg-yellow-200 text-sm flex items-center gap-2">
                            <i class="fas fa-sitemap"></i>
                            <span>Jadikan Sub-tugas</span>
                        </button>
                         <button type="button" id="change-parent-btn" class="hidden px-4 py-2 bg-indigo-100 text-indigo-800 rounded-md hover:bg-indigo-200 text-sm flex items-center gap-2">
                            <i class="fas fa-people-arrows"></i>
                            <span>Ubah Induk</span>
                        </button>
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" id="cancel-task-edit" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Batal</button>
                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Simpan</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Day Tasks List Modal -->
    <div id="day-tasks-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="day-tasks-modal-content" class="bg-white p-6 rounded-lg shadow-xl w-full max-w-lg modal-enter">
            <div class="flex justify-between items-center mb-4">
                 <h3 class="text-xl font-bold text-gray-800">Tugas pada <span id="day-tasks-date"></span></h3>
                 <button id="close-day-tasks-modal" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div id="day-tasks-list" class="space-y-2 max-h-80 overflow-y-auto">
                <!-- Task list will be injected here -->
            </div>
        </div>
    </div>

    <!-- Move Task Modals -->
    <div id="move-task-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="move-task-modal-content" class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md modal-enter">
            <h3 class="text-2xl font-bold mb-6 text-gray-800">Pindahkan Tugas ke Proyek</h3>
            <form id="move-task-form">
                <div class="mb-4">
                    <label for="move-to-project-select" class="block text-sm font-medium text-gray-700 mb-1">Pilih Proyek Tujuan</label>
                    <select id="move-to-project-select" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white"></select>
                </div>
                <div class="mb-6">
                    <label for="move-to-parent-task-select" class="block text-sm font-medium text-gray-700 mb-1">Jadikan Sub-tugas dari (Opsional)</label>
                    <select id="move-to-parent-task-select" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white">
                        <option value="">-- Jadikan Tugas Utama --</option>
                    </select>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancel-move-task" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Batal</button>
                    <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">Pindahkan Tugas</button>
                </div>
            </form>
        </div>
    </div>

    <div id="move-as-subtask-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="move-as-subtask-modal-content" class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md modal-enter">
            <h3 id="move-as-subtask-title" class="text-2xl font-bold mb-6 text-gray-800">Jadikan Sub-tugas</h3>
            <form id="move-as-subtask-form">
                <div class="mb-6">
                    <label for="parent-task-select" class="block text-sm font-medium text-gray-700 mb-1">Pilih Tugas Induk</label>
                    <select id="parent-task-select" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white"></select>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancel-move-as-subtask" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Batal</button>
                    <button type="submit" id="submit-move-as-subtask" class="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700">Pindahkan</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Notification Modal -->
    <div id="notification-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="notification-modal-content" class="bg-white p-8 rounded-lg shadow-xl w-full max-w-sm modal-enter">
            <h3 id="notification-title" class="text-xl font-bold mb-4 text-gray-800">Pemberitahuan</h3>
            <p id="notification-message" class="text-gray-600 mb-6"></p>
            <div class="flex justify-end">
                <button id="notification-ok-btn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">OK</button>
            </div>
        </div>
    </div>


<script>
    // --- DATA CONTOH ---
    let projects = [
        {
            id: 1,
            name: "Peluncuran Website E-commerce",
            status: "Running",
            startDate: "2025-09-01",
            endDate: "2025-10-31",
            tasks: [
                { id: 1, name: "Desain UI/UX", status: "Done", assignee: "Andi", startDate: "2025-09-01", endDate: "2025-09-10" },
                { 
                    id: 2, name: "Pengembangan Frontend", status: "On Progress", assignee: "Budi", startDate: "2025-09-11", endDate: "2025-09-30",
                    subtasks: [
                        { id: 101, name: "Setup Awal Proyek", status: "Done", assignee: "Budi", startDate: "2025-09-11", endDate: "2025-09-15" },
                        { id: 102, name: "Buat Komponen Utama", status: "On Progress", assignee: "Budi", startDate: "2025-09-16", endDate: "2025-09-25" },
                        { id: 103, name: "Integrasi API Login", status: "Open", assignee: "Citra", startDate: "2025-09-26", endDate: "2025-09-30" }
                    ] 
                },
                { 
                    id: 3, name: "Pengembangan Backend", status: "On Progress", assignee: "Citra", startDate: "2025-09-15", endDate: "2025-10-10",
                    subtasks: [
                        { id: 104, name: "Desain Database Schema", status: "Done", assignee: "Citra", startDate: "2025-09-15", endDate: "2025-09-20" },
                        { id: 105, name: "Buat Endpoint Autentikasi", status: "On Progress", assignee: "Citra", startDate: "2025-09-21", endDate: "2025-10-10" }
                    ]
                },
                { id: 4, name: "Pengujian & QA", status: "Need Requirement", assignee: "Dewi", startDate: "2025-10-11", endDate: "2025-10-20" },
                { id: 5, name: "Deployment ke Server", status: "Open", assignee: "Eko", startDate: "2025-10-21", endDate: "2025-10-25" }
            ]
        },
        {
            id: 2,
            name: "Aplikasi Mobile Banking",
            status: "Scheduled",
            startDate: "2025-10-01",
            endDate: "2025-12-15",
            tasks: [
                { id: 6, name: "Riset Kebutuhan Pengguna", status: "Done", assignee: "Fara", startDate: "2025-10-01", endDate: "2025-10-10" },
                { id: 7, name: "Pembuatan Wireframe & Prototipe", status: "On Progress", assignee: "Gilang", startDate: "2025-10-11", endDate: "2025-10-25" },
                { id: 8, name: "Pengembangan Aplikasi iOS", status: "Open", assignee: "Hana", startDate: "2025-10-26", endDate: "2025-11-20" },
                { id: 9, name: "Pengembangan Aplikasi Android", status: "Open", assignee: "Indra", startDate: "2025-10-26", endDate: "2025-11-20" },
                { id: 10, name: "Integrasi API", status: "Open", assignee: "Joko", startDate: "2025-11-21", endDate: "2025-12-05" }
            ]
        }
    ];
    
    let timeBoxingTasks = [
        { id: 201, name: "Finalisasi Laporan Kuartal 3", status: "On Progress", assignee: "Andi", startDate: "2025-09-25", endDate: "2025-09-27" },
        { id: 202, name: "Persiapan Meeting Investor", status: "Open", assignee: "Dewi", startDate: "2025-09-28", endDate: "2025-10-02" },
        { id: 203, name: "Riset Kompetitor", status: "Open", assignee: "Budi", startDate: "2025-10-03", endDate: "2025-10-10" },
        { id: 204, name: "Brainstorming Fitur Baru", status: "Done", assignee: "Citra", startDate: "2025-09-22", endDate: "2025-09-24" }
    ];

    const projectStatusMap = {
        'Scheduled': { bg: 'bg-gray-200', text: 'text-gray-800' },
        'Running': { bg: 'bg-blue-200', text: 'text-blue-800' },
        'Document': { bg: 'bg-yellow-200', text: 'text-yellow-800' },
        'Document Check': { bg: 'bg-purple-200', text: 'text-purple-800' },
        'Done': { bg: 'bg-green-200', text: 'text-green-800' },
        'Cancel': { bg: 'bg-orange-200', text: 'text-orange-800' },
        'Rejected': { bg: 'bg-red-200', text: 'text-red-800' }
    };
    const projectStatuses = ['Scheduled', 'Running', 'Document', 'Document Check', 'Done', 'Cancel', 'Rejected'];

    const taskStatusMap = {
        'Open': { bg: 'bg-gray-200', text: 'text-gray-800', color: '#9ca3af' },
        'On Progress': { bg: 'bg-blue-200', text: 'text-blue-800', color: '#3b82f6' },
        'Need Requirement': { bg: 'bg-yellow-200', text: 'text-yellow-800', color: '#f59e0b' },
        'Done': { bg: 'bg-green-200', text: 'text-green-800', color: '#22c55e' }
    };
    const statuses = ['Open', 'On Progress', 'Need Requirement', 'Done'];
    
    // --- ELEMENT SELECTORS ---
    const mainContent = document.getElementById('main-content');
    const modal = document.getElementById('edit-project-modal');
    const modalContent = document.getElementById('modal-content');
    const editProjectForm = document.getElementById('edit-project-form');
    const taskModal = document.getElementById('edit-task-modal');
    const taskModalContent = document.getElementById('task-modal-content');
    const editTaskForm = document.getElementById('edit-task-form');

    let currentProject = null;
    let editingProjectId = null;
    let currentContext = 'projects'; // 'projects' or 'timeboxing'
    let currentView = 'list';
    let editingItem = { id: null, isSubtask: false };
    let movingTaskId = null;
    let showSubtasks = true; 

    // --- HELPER FUNCTIONS ---
    function parseDateAsUTC(dateString) {
        if (!dateString) return null;
        const [year, month, day] = dateString.split('-').map(Number);
        return new Date(Date.UTC(year, month - 1, day));
    }

    function formatDateToYYYYMMDD(date) {
        return date.toISOString().split('T')[0];
    }

    function findItem(itemId) { // Universal finder for tasks/subtasks
        for (const project of projects) {
            for (const task of project.tasks) {
                if (task.id === itemId) return { item: task, isSubtask: false };
                if (task.subtasks) {
                    const subtask = task.subtasks.find(st => st.id === itemId);
                    if (subtask) return { item: subtask, isSubtask: true, parent: task };
                }
            }
        }
        const timeBoxTask = timeBoxingTasks.find(t => t.id === itemId);
        if (timeBoxTask) return { item: timeBoxTask, isSubtask: false, fromTimeboxing: true };
        
        return { item: null };
    }
    
    function generateNewId() {
        let allIds = [];
        projects.forEach(p => {
            p.tasks.forEach(t => {
                allIds.push(t.id);
                if (t.subtasks) {
                    t.subtasks.forEach(st => allIds.push(st.id));
                }
            });
        });
        timeBoxingTasks.forEach(t => allIds.push(t.id));
        return Math.max(0, ...allIds) + 1;
    }
    
    // --- RENDER FUNCTIONS ---
    function renderAllProjectsView() {
        currentContext = 'projects';
        currentProject = null;
        mainContent.innerHTML = `
            <h2 class="text-3xl font-bold text-gray-800 mb-6">Semua Proyek</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                ${projects.map(project => {
                    const doneTasks = project.tasks.filter(t => t.status === 'Done').length;
                    const totalTasks = project.tasks.length;
                    const progress = totalTasks > 0 ? Math.round((doneTasks / totalTasks) * 100) : 0;
                    const statusInfo = projectStatusMap[project.status];
                    return `
                        <div class="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow cursor-pointer flex flex-col" onclick="showProjectView(${project.id})">
                            <div class="flex justify-between items-start mb-2">
                                <h3 class="text-xl font-bold text-gray-800 truncate pr-2">${project.name}</h3>
                                <span class="text-xs font-bold px-2 py-1 rounded-full ${statusInfo.bg} ${statusInfo.text} flex-shrink-0">${project.status}</span>
                            </div>
                            <p class="text-sm text-gray-500">${project.startDate} - ${project.endDate}</p>
                            <div class="mt-4 pt-4 border-t border-gray-100 flex-grow flex flex-col justify-end">
                                <div>
                                    <div class="flex justify-between items-center mb-1">
                                        <span class="text-sm font-medium text-gray-600">Progress</span>
                                        <span class="text-sm font-bold text-blue-600">${progress}%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${progress}%"></div>
                                    </div>
                                    <p class="text-xs text-gray-500 mt-2 text-right">${doneTasks} dari ${totalTasks} tugas selesai</p>
                                </div>
                            </div>
                        </div>
                    `;
                }).join('')}
                 <div class="bg-gray-50 border-2 border-dashed border-gray-300 p-6 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors cursor-pointer flex flex-col items-center justify-center">
                    <i class="fas fa-plus-circle text-4xl text-gray-400"></i>
                    <p class="mt-2 font-semibold text-gray-600">Tambah Proyek Baru</p>
                </div>
            </div>
        `;
        updateSidebarActiveState('projects');
    }

    function showProjectView(projectId) {
        currentContext = 'projects';
        currentProject = projects.find(p => p.id === projectId);
        if (!currentProject) return;
        
        mainContent.innerHTML = `
            <div id="project-view">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                     <div class="flex items-center gap-3">
                        <a href="#" class="text-blue-500 hover:underline" id="back-to-projects">&larr; Kembali ke Proyek</a>
                        <span class="text-gray-300">/</span>
                        <h2 class="text-3xl font-bold text-gray-800">${currentProject.name}</h2>
                        <button id="edit-project-btn" class="text-gray-400 hover:text-blue-500"><i class="fas fa-pencil-alt"></i></button>
                     </div>
                    <div class="flex items-center gap-4 mt-4 md:mt-0">
                        <div id="subtask-toggle-container" class="items-center hidden">
                             <label for="subtask-toggle" class="text-sm font-medium text-gray-700 mr-2">Show Sub-tasks</label>
                             <div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
                                <input type="checkbox" name="subtask-toggle" id="subtask-toggle" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer" ${showSubtasks ? 'checked' : ''}/>
                                <label for="subtask-toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
                            </div>
                        </div>
                        <div id="view-switcher" class="flex items-center bg-gray-200 rounded-lg p-1">
                            <button data-view="list" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">List</button>
                            <button data-view="kanban" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">Kanban</button>
                            <button data-view="gantt" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">Gantt</button>
                            <button data-view="calendar" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">Kalender</button>
                        </div>
                    </div>
                </div>
                <div id="project-content-area"></div>
            </div>
        `;
        
        document.getElementById('back-to-projects').addEventListener('click', e => {
            e.preventDefault();
            renderAllProjectsView();
        });
        document.getElementById('edit-project-btn').addEventListener('click', () => openEditModal(currentProject.id));
        
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                currentView = e.target.dataset.view;
                renderCurrentView();
            });
        });

        document.getElementById('subtask-toggle').addEventListener('change', (e) => {
            showSubtasks = e.target.checked;
            renderCurrentView();
        });
        
        updateSidebarActiveState('projects');
        renderCurrentView();
    }

    function renderTimeBoxingView() {
        currentContext = 'timeboxing';
        currentProject = null;
        mainContent.innerHTML = `
             <div id="timeboxing-view">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                     <h2 class="text-3xl font-bold text-gray-800">Time Boxing</h2>
                    <div id="view-switcher" class="flex items-center bg-gray-200 rounded-lg p-1 mt-4 md:mt-0">
                        <button data-view="list" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">List</button>
                        <button data-view="kanban" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">Kanban</button>
                        <button data-view="gantt" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">Gantt</button>
                        <button data-view="calendar" class="view-btn px-4 py-1.5 text-sm font-semibold rounded-md transition-colors duration-200">Kalender</button>
                    </div>
                </div>
                <div id="project-content-area"></div>
            </div>
        `;
         document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                currentView = e.target.dataset.view;
                renderCurrentView();
            });
        });
        updateSidebarActiveState('timeboxing');
        renderCurrentView();
    }
    
    function renderCurrentView() {
        let contextObject;
        if (currentContext === 'projects' && currentProject) {
            contextObject = currentProject;
        } else if (currentContext === 'timeboxing') {
            const tasks = timeBoxingTasks;
            let startDate, endDate;
            if (tasks.length > 0) {
                 const allDates = tasks.flatMap(t => [parseDateAsUTC(t.startDate), parseDateAsUTC(t.endDate)]);
                 startDate = formatDateToYYYYMMDD(new Date(Math.min.apply(null, allDates)));
                 endDate = formatDateToYYYYMMDD(new Date(Math.max.apply(null, allDates)));
            } else {
                 const today = new Date();
                 startDate = formatDateToYYYYMMDD(today);
                 endDate = formatDateToYYYYMMDD(new Date(new Date().setDate(today.getDate() + 30)));
            }
            contextObject = { tasks, startDate, endDate };
        } else {
            return; 
        }

        const toggleContainer = document.getElementById('subtask-toggle-container');
        if (toggleContainer) {
             if (currentView === 'list' || currentContext === 'timeboxing') {
                toggleContainer.classList.add('hidden');
                toggleContainer.classList.remove('flex');
            } else {
                toggleContainer.classList.remove('hidden');
                toggleContainer.classList.add('flex');
            }
            document.getElementById('subtask-toggle').checked = showSubtasks;
        }

        document.querySelectorAll('.view-btn').forEach(btn => {
            if (btn.dataset.view === currentView) {
                btn.classList.add('bg-white', 'text-gray-800', 'shadow-sm');
                btn.classList.remove('text-gray-600');
            } else {
                btn.classList.remove('bg-white', 'text-gray-800', 'shadow-sm');
                btn.classList.add('text-gray-600');
            }
        });

        const contentArea = document.getElementById('project-content-area');
        if (currentView === 'list') {
            contentArea.innerHTML = renderListView(contextObject);
        } else if (currentView === 'kanban') {
            contentArea.innerHTML = renderKanbanView(contextObject);
            setupKanbanDragDrop();
        } else if (currentView === 'gantt') {
            contentArea.innerHTML = renderGanttView(contextObject);
            setupGanttResize();
        } else if (currentView === 'calendar') {
            const calendarStartDate = parseDateAsUTC(contextObject.startDate);
            contentArea.innerHTML = renderCalendarView(contextObject, calendarStartDate);
            setupCalendarControls(calendarStartDate);
        }
    }
    
    function renderListView(contextObject) {
        let tableRows = '';
        contextObject.tasks.forEach(task => {
            const hasSubtasks = task.subtasks && task.subtasks.length > 0;
            const subtaskProgress = hasSubtasks ? task.subtasks.filter(st => st.status === 'Done').length : 0;
            const totalSubtasks = hasSubtasks ? task.subtasks.length : 0;

            tableRows += `
                <tr class="border-b border-gray-200 hover:bg-gray-50 parent-task-row" ondblclick="openEditTaskModal(${task.id})">
                    <td class="py-3 px-4 font-medium text-gray-800">
                        <div class="flex items-center">
                            ${hasSubtasks ? `<button class="mr-2 text-gray-400 hover:text-gray-700 w-5" onclick="toggleSubtasks(event, ${task.id})"><i class="fas fa-chevron-right transform transition-transform"></i></button>` : '<div class="w-5 mr-2"></div>'}
                            <span>${task.name}</span>
                        </div>
                    </td>
                    <td class="py-3 px-4 text-gray-600">${task.assignee || ''}</td>
                    <td class="py-3 px-4 text-gray-600">${task.startDate}</td>
                    <td class="py-3 px-4 text-gray-600">${task.endDate}</td>
                    <td class="py-3 px-4">
                        ${hasSubtasks
                            ? `<div class="text-sm text-gray-600 font-medium">${subtaskProgress}/${totalSubtasks} selesai</div>`
                            : `<select class="status-select border-none rounded-md py-1 px-2 text-sm font-medium ${taskStatusMap[task.status].bg} ${taskStatusMap[task.status].text}" data-task-id="${task.id}" onchange="updateTaskStatus(this)" onclick="event.stopPropagation();">
                                ${statuses.map(s => `<option value="${s}" ${task.status === s ? 'selected' : ''}>${s}</option>`).join('')}
                               </select>`
                        }
                    </td>
                </tr>
            `;

            if (hasSubtasks) {
                task.subtasks.forEach(subtask => {
                    tableRows += `
                        <tr class="hidden subtask-row bg-gray-50 border-b border-gray-200 hover:bg-gray-100" data-parent-id="${task.id}" ondblclick="openEditTaskModal(${subtask.id})">
                            <td class="py-2 pl-16 pr-4 text-gray-700">${subtask.name}</td>
                            <td class="py-2 px-4 text-gray-600">${subtask.assignee || ''}</td>
                            <td class="py-2 px-4 text-gray-600">${subtask.startDate}</td>
                            <td class="py-2 px-4 text-gray-600">${subtask.endDate}</td>
                            <td class="py-2 px-4">
                               <select class="status-select border-none rounded-md py-1 px-2 text-sm font-medium ${taskStatusMap[subtask.status].bg} ${taskStatusMap[subtask.status].text}" onchange="updateSubtaskStatus(this, ${task.id}, ${subtask.id})" onclick="event.stopPropagation();">
                                 ${statuses.map(s => `<option value="${s}" ${subtask.status === s ? 'selected' : ''}>${s}</option>`).join('')}
                               </select>
                            </td>
                        </tr>
                    `;
                });
            }
        });

        return `
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <table class="w-full">
                    <thead class="bg-gray-50 border-b border-gray-200">
                        <tr>
                            <th class="py-3 px-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Tasks</th>
                            <th class="py-3 px-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">PIC</th>
                            <th class="py-3 px-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Start Date</th>
                            <th class="py-3 px-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">End Date</th>
                            <th class="py-3 px-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Status</th>
                        </tr>
                    </thead>
                    <tbody id="task-list-body">${tableRows}</tbody>
                </table>
            </div>
        `;
    }

    function renderKanbanView(contextObject) {
        const flatTaskList = [];
        contextObject.tasks.forEach(task => {
            flatTaskList.push({ ...task, isSubtask: false });
            if (showSubtasks && task.subtasks) {
                task.subtasks.forEach(subtask => {
                    flatTaskList.push({ ...subtask, isSubtask: true, parentName: task.name });
                });
            }
        });

        let columnsHtml = statuses.map(status => {
            const tasksInStatus = flatTaskList.filter(task => task.status === status);
            return `
                <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-700 mb-4 px-1">${status}</h3>
                    <div class="kanban-column space-y-4 p-2 bg-gray-100 rounded-lg" data-status="${status}">
                        ${tasksInStatus.map(task => {
                             return `
                                <div class="task-card bg-white p-4 rounded-lg shadow-sm border" draggable="true" data-task-id="${task.id}" ondblclick="openEditTaskModal(${task.id})">
                                    ${task.isSubtask ? `<div class="text-xs text-gray-500 mb-1"><i class="fas fa-level-up-alt fa-rotate-90 mr-1"></i> ${task.parentName}</div>` : ''}
                                    <h4 class="font-semibold text-gray-800">${task.name}</h4>
                                    <p class="text-sm text-gray-500 mt-2">Assignee: ${task.assignee}</p>
                                </div>
                             `;
                        }).join('')}
                    </div>
                </div>
            `;
        }).join('');
        return `<div class="flex space-x-6">${columnsHtml}</div>`;
    }

    function renderGanttView(contextObject) {
        const projectStartDate = parseDateAsUTC(contextObject.startDate);
        const projectEndDate = parseDateAsUTC(contextObject.endDate);
        const totalDays = Math.round((projectEndDate - projectStartDate) / (1000 * 60 * 60 * 24)) + 1;
        if (totalDays <= 0) return '<div>Rentang tanggal proyek tidak valid.</div>';

        const dayWidth = 50;
        const taskNameWidth = 250;
        const ganttWidth = totalDays * dayWidth;
        const totalWidth = taskNameWidth + ganttWidth;

        const today = parseDateAsUTC(formatDateToYYYYMMDD(new Date()));
        const todayFormatted = formatDateToYYYYMMDD(today);
        
        let dateHeaders = '';
        let backgroundCols = '';
        let dayCounter = new Date(projectStartDate.valueOf());
        const dayNames = ["M", "S", "S", "R", "K", "J", "S"];

        for (let i = 0; i < totalDays; i++) {
            const dayOfWeek = dayCounter.getUTCDay();
            const isToday = formatDateToYYYYMMDD(dayCounter) === todayFormatted;
            let weekendClass = dayOfWeek === 0 ? 'bg-red-100' : (dayOfWeek === 6 ? 'bg-pink-100' : '');

            dateHeaders += `<div class="text-center border-r border-gray-200 flex-shrink-0 flex flex-col justify-center py-1 ${weekendClass} ${isToday ? 'bg-blue-100' : ''}" style="width: ${dayWidth}px;"><div><div class="text-xs font-semibold">${dayNames[dayOfWeek]}</div><div class="text-lg font-bold">${dayCounter.getUTCDate()}</div></div></div>`;
            backgroundCols += `<div class="h-full border-r border-gray-200 ${weekendClass}" style="width: ${dayWidth}px; flex-shrink: 0;"></div>`;
            dayCounter.setUTCDate(dayCounter.getUTCDate() + 1);
        }

        let taskRows = '';
        contextObject.tasks.forEach(task => {
            taskRows += renderGanttRow(task, 0, projectStartDate, dayWidth, taskNameWidth, ganttWidth);
            if (showSubtasks && task.subtasks) {
                task.subtasks.forEach(subtask => {
                    taskRows += renderGanttRow(subtask, 1, projectStartDate, dayWidth, taskNameWidth, ganttWidth);
                });
            }
        });

        let todayLineHtml = '';
        if (today >= projectStartDate && today <= projectEndDate) {
            const todayOffsetDays = (today - projectStartDate) / (1000 * 60 * 60 * 24);
            const todayLinePosition = (todayOffsetDays * dayWidth) + (dayWidth / 2);
            todayLineHtml = `<div class="absolute top-0 bottom-0 z-20 pointer-events-none" style="left: ${taskNameWidth + todayLinePosition}px;"><div class="w-0.5 h-full bg-blue-500"></div></div>`;
        }

        return `<div class="bg-white rounded-lg shadow-md overflow-x-auto"><div class="relative" style="width: ${totalWidth}px;"><div class="flex sticky top-0 bg-gray-50 z-30 border-b-2 border-gray-300 h-14"><div class="border-r border-gray-300 flex items-center p-4 flex-shrink-0" style="width: ${taskNameWidth}px;"><span class="font-semibold text-gray-600">Tasks</span></div><div class="flex">${dateHeaders}</div></div><div class="relative"><div class="absolute top-0 left-0 w-full h-full flex z-0" style="left: ${taskNameWidth}px; width: ${ganttWidth}px;">${backgroundCols}</div><div class="relative z-10">${taskRows}</div></div>${todayLineHtml}</div></div>`;
    }
    
    function renderGanttRow(task, level, projectStartDate, dayWidth, taskNameWidth, ganttWidth) {
        const taskStartDate = parseDateAsUTC(task.startDate);
        const taskEndDate = parseDateAsUTC(task.endDate);
        if (!taskStartDate || !taskEndDate) return '';
        const startOffsetDays = Math.round((taskStartDate - projectStartDate) / (1000 * 60 * 60 * 24));
        const durationDays = Math.round((taskEndDate - taskStartDate) / (1000 * 60 * 60 * 24)) + 1;
        const left = startOffsetDays * dayWidth;
        const width = durationDays * dayWidth - 4;
        const colorClass = taskStatusMap[task.status].bg.replace('200', '500');
        const indentation = level * 30;

        return `<div class="flex border-b border-gray-200 h-16"><div class="pr-4 border-r border-gray-200 h-full flex items-center flex-shrink-0 cursor-pointer" style="width: ${taskNameWidth}px; padding-left: ${indentation + 16}px;" ondblclick="openEditTaskModal(${task.id})"><div><p class="font-medium text-gray-800 truncate">${task.name}</p><p class="text-sm text-gray-500">${task.assignee || ''}</p></div></div><div class="relative h-full" style="width: ${ganttWidth}px; flex-shrink: 0;"><div title="${task.name}: ${task.startDate} to ${task.endDate}" class="gantt-chart-row-bar absolute h-10 top-1/2 -translate-y-1/2 rounded-lg text-white text-sm flex items-center overflow-hidden cursor-pointer ${colorClass}" style="left: ${left}px; width: ${width}px;" data-task-id="${task.id}" ondblclick="openEditTaskModal(${task.id})"><div class="resize-handle left-0" data-direction="start"></div><span class="truncate px-3 font-semibold">${task.name}</span><div class="resize-handle right-0" data-direction="end"></div></div></div></div>`;
    }

    function renderCalendarView(contextObject, date) {
        const month = date.getUTCMonth();
        const year = date.getUTCFullYear();
        const firstDay = new Date(Date.UTC(year, month, 1)).getUTCDay();
        const daysInMonth = new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
        const monthNames = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"];
        const dayNames = ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"];

        const flatTaskList = [];
        contextObject.tasks.forEach(task => {
            flatTaskList.push(task);
            if (showSubtasks && task.subtasks) flatTaskList.push(...task.subtasks);
        });

        let header = `<div class="bg-white p-6 rounded-lg shadow-md"><div class="flex justify-between items-center mb-4"><button id="prev-month" class="p-2 rounded-full hover:bg-gray-100"><i class="fas fa-chevron-left"></i></button><h3 class="text-xl font-bold text-gray-800">${monthNames[month]} ${year}</h3><button id="next-month" class="p-2 rounded-full hover:bg-gray-100"><i class="fas fa-chevron-right"></i></button></div><div class="grid grid-cols-7 gap-1 text-center font-semibold text-gray-600">${dayNames.map(day => `<div>${day}</div>`).join('')}</div><div class="grid grid-cols-7 gap-1 mt-2">`;
        let body = '';
        for (let i = 0; i < firstDay; i++) body += `<div class="border rounded-md bg-gray-50 h-24"></div>`;

        for (let day = 1; day <= daysInMonth; day++) {
            const currentDate = new Date(Date.UTC(year, month, day));
            const dayOfWeek = currentDate.getUTCDay();
            let weekendClass = dayOfWeek === 0 ? 'bg-red-100' : (dayOfWeek === 6 ? 'bg-pink-100' : '');

            let tasksOnDay = flatTaskList.filter(task => {
                const taskStart = parseDateAsUTC(task.startDate);
                const taskEnd = parseDateAsUTC(task.endDate);
                return currentDate >= taskStart && currentDate <= taskEnd;
            });

            let dayContentHtml = '';
            if (tasksOnDay.length > 0 && tasksOnDay.length <= 3) {
                dayContentHtml = tasksOnDay.map(task => `<div class="calendar-task text-white ${taskStatusMap[task.status].bg.replace('200','500')}" style="position: relative; top: auto; left: auto; right: auto; margin-top: 2px;" ondblclick="openEditTaskModal(${task.id})">${task.name}</div>`).join('');
            } else if (tasksOnDay.length > 3) {
                const dateString = formatDateToYYYYMMDD(currentDate);
                const statusCounts = tasksOnDay.reduce((acc, task) => { acc[task.status] = (acc[task.status] || 0) + 1; return acc; }, {});
                let gradientParts = [], cumulativePercent = 0;
                statuses.forEach(status => {
                    if (statusCounts[status]) {
                        const percentage = (statusCounts[status] / tasksOnDay.length) * 100;
                        gradientParts.push(`${taskStatusMap[status].color} ${cumulativePercent}% ${cumulativePercent + percentage}%`);
                        cumulativePercent += percentage;
                    }
                });
                dayContentHtml = `<div class="absolute bottom-2 right-2 flex items-center justify-center h-7 w-7 rounded-full text-white text-xs font-bold cursor-pointer hover:opacity-80 border-2 border-white shadow-lg" style="background-image: conic-gradient(${gradientParts.join(', ')});" onclick="openDayTasksModal('${dateString}')">${tasksOnDay.length}</div>`;
            }
            body += `<div class="calendar-day border rounded-md p-2 h-24 ${tasksOnDay.length > 0 ? 'has-task' : ''} ${weekendClass} relative"><span class="text-sm font-medium">${day}</span><div class="mt-1">${dayContentHtml}</div></div>`;
        }
        return header + body + `</div></div>`;
    }
    
    // --- EVENT HANDLERS & SETUP ---
    function updateSidebarActiveState(activeLink) {
        document.querySelectorAll('nav a').forEach(link => link.classList.remove('bg-blue-50', 'text-blue-600', 'font-bold'));
        if (activeLink === 'projects') document.getElementById('nav-link-projects').classList.add('bg-blue-50', 'text-blue-600', 'font-bold');
        else if (activeLink === 'timeboxing') document.getElementById('nav-link-timeboxing').classList.add('bg-blue-50', 'text-blue-600', 'font-bold');
    }

    function toggleSubtasks(event, parentId) {
        event.stopPropagation();
        document.querySelectorAll(`.subtask-row[data-parent-id="${parentId}"]`).forEach(row => row.classList.toggle('hidden'));
        event.currentTarget.querySelector('i').classList.toggle('rotate-90');
    }
    
    function updateSubtaskStatus(selectElement, parentId, subtaskId) {
        event.stopPropagation();
        const newStatus = selectElement.value;
        const parentTask = currentProject.tasks.find(t => t.id === parentId);
        if (parentTask && parentTask.subtasks) {
            const subtask = parentTask.subtasks.find(st => st.id === subtaskId);
            if (subtask) {
                subtask.status = newStatus;
                renderCurrentView(); 
            }
        }
    }

    function updateTaskStatus(selectElement) {
        const taskId = parseInt(selectElement.dataset.taskId);
        const { item: task } = findItem(taskId);
        if (task) {
            task.status = selectElement.value;
            renderCurrentView(); 
        }
    }
    
    function setupKanbanDragDrop() {
        const tasks = document.querySelectorAll('.task-card');
        const columns = document.querySelectorAll('.kanban-column');
        let draggedItem = null;
        tasks.forEach(task => {
            task.addEventListener('dragstart', () => {
                draggedItem = task;
                setTimeout(() => task.style.display = 'none', 0);
            });
            task.addEventListener('dragend', () => {
                setTimeout(() => {
                    draggedItem.style.display = 'block';
                    draggedItem = null;
                }, 0);
            });
        });
        columns.forEach(column => {
            column.addEventListener('dragover', e => e.preventDefault());
            column.addEventListener('dragenter', e => {
                e.preventDefault();
                column.style.backgroundColor = 'rgba(0,0,0,0.05)';
            });
            column.addEventListener('dragleave', () => {
                column.style.backgroundColor = '';
            });
            column.addEventListener('drop', e => {
                column.style.backgroundColor = '';
                const taskId = parseInt(draggedItem.dataset.taskId);
                const newStatus = column.dataset.status;
                const { item: taskToUpdate } = findItem(taskId);
                if (taskToUpdate) {
                    taskToUpdate.status = newStatus;
                    renderCurrentView();
                }
            });
        });
    }

    function setupGanttResize() {
        const dayWidth = 50, pixelsPerDay = dayWidth;
        const ganttContext = currentProject ? currentProject : { startDate: document.querySelector('.gantt-chart-body') ? projects[0].startDate : '2025-01-01' };
        const projectStartDate = parseDateAsUTC(ganttContext.startDate);

        document.querySelectorAll('.resize-handle').forEach(handle => {
            handle.addEventListener('mousedown', e => {
                e.preventDefault(); e.stopPropagation();
                const bar = e.target.closest('.gantt-chart-row-bar');
                const taskId = parseInt(bar.dataset.taskId);
                const { item: task } = findItem(taskId);
                const direction = e.target.dataset.direction;
                const initialMouseX = e.clientX;
                const originalStartDate = parseDateAsUTC(task.startDate);
                const originalEndDate = parseDateAsUTC(task.endDate);

                document.body.style.cursor = 'ew-resize';

                const doResize = moveEvent => {
                    const dayChange = Math.round((moveEvent.clientX - initialMouseX) / pixelsPerDay);
                    if (direction === 'end') {
                        const newEndDate = new Date(originalEndDate.valueOf());
                        newEndDate.setUTCDate(originalEndDate.getUTCDate() + dayChange);
                        if (newEndDate >= parseDateAsUTC(task.startDate)) task.endDate = formatDateToYYYYMMDD(newEndDate);
                    } else {
                        const newStartDate = new Date(originalStartDate.valueOf());
                        newStartDate.setUTCDate(originalStartDate.getUTCDate() + dayChange);
                        if (newStartDate <= parseDateAsUTC(task.endDate)) task.startDate = formatDateToYYYYMMDD(newStartDate);
                    }
                    const newStartOffsetDays = Math.round((parseDateAsUTC(task.startDate) - projectStartDate) / 86400000);
                    const newDurationDays = Math.round((parseDateAsUTC(task.endDate) - parseDateAsUTC(task.startDate)) / 86400000) + 1;
                    bar.style.left = `${newStartOffsetDays * dayWidth}px`;
                    bar.style.width = `${newDurationDays * dayWidth - 4}px`;
                    bar.title = `${task.name}: ${task.startDate} to ${task.endDate}`;
                };

                const stopResize = () => {
                    document.removeEventListener('mousemove', doResize);
                    document.removeEventListener('mouseup', stopResize);
                    document.body.style.cursor = 'default';
                    renderCurrentView();
                };
                document.addEventListener('mousemove', doResize);
                document.addEventListener('mouseup', stopResize);
            });
        });
    }

    function setupCalendarControls(initialDate) {
        let currentDate = new Date(initialDate.valueOf());
        currentDate.setUTCDate(1); 
        document.getElementById('prev-month').onclick = () => {
            currentDate.setUTCMonth(currentDate.getUTCMonth() - 1);
            const contextObject = currentProject ? currentProject : { tasks: timeBoxingTasks, startDate: formatDateToYYYYMMDD(currentDate) };
            renderCalendarView(contextObject, currentDate);
            setupCalendarControls(currentDate);
        };
        document.getElementById('next-month').onclick = () => {
            currentDate.setUTCMonth(currentDate.getUTCMonth() + 1);
            const contextObject = currentProject ? currentProject : { tasks: timeBoxingTasks, startDate: formatDateToYYYYMMDD(currentDate) };
            renderCalendarView(contextObject, currentDate);
            setupCalendarControls(currentDate);
        };
    }
    
    // --- MODAL FUNCTIONS ---
    function openEditModal(projectId) {
        const projectToEdit = projects.find(p => p.id === projectId);
        if (!projectToEdit) return;
        
        editingProjectId = projectId;
        document.getElementById('projectName').value = projectToEdit.name;
        document.getElementById('projectStartDate').value = projectToEdit.startDate;
        document.getElementById('projectEndDate').value = projectToEdit.endDate;

        const projectStatusSelect = document.getElementById('projectStatus');
        projectStatusSelect.innerHTML = projectStatuses.map(s => `<option value="${s}" ${projectToEdit.status === s ? 'selected' : ''}>${s}</option>`).join('');

        modal.classList.remove('hidden');
        modal.classList.add('flex');
        setTimeout(() => modalContent.classList.add('modal-enter-active'), 10);
    }
    
    function closeEditModal() {
        modalContent.classList.remove('modal-enter-active');
        modalContent.classList.add('modal-leave-active');
        setTimeout(() => {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            modalContent.classList.remove('modal-leave-active');
            editingProjectId = null;
        }, 200);
    }

    function openEditTaskModal(itemId) {
        const { item, isSubtask } = findItem(itemId);
        if (!item) return;

        editingItem = { id: itemId, isSubtask };
        document.getElementById('task-modal-title').innerText = isSubtask ? 'Edit Sub-Tugas' : 'Edit Tugas';
        document.getElementById('taskName').value = item.name;
        document.getElementById('taskAssignee').value = item.assignee || '';
        document.getElementById('taskStartDate').value = item.startDate;
        document.getElementById('taskEndDate').value = item.endDate;
        
        const moveBtn = document.getElementById('move-to-project-btn');
        const promoteBtn = document.getElementById('promote-task-btn');
        const makeSubtaskBtn = document.getElementById('make-subtask-btn');
        const changeParentBtn = document.getElementById('change-parent-btn');
        
        // Hide all action buttons first
        moveBtn.classList.add('hidden');
        promoteBtn.classList.add('hidden');
        makeSubtaskBtn.classList.add('hidden');
        changeParentBtn.classList.add('hidden');

        if (currentContext === 'timeboxing') {
            moveBtn.classList.remove('hidden');
            moveBtn.onclick = () => openMoveTaskModal(itemId);
        } else if (currentContext === 'projects') {
            if (isSubtask) {
                promoteBtn.classList.remove('hidden');
                promoteBtn.onclick = () => handlePromoteToTask(itemId);
                changeParentBtn.classList.remove('hidden');
                changeParentBtn.onclick = () => openChangeParentModal(itemId);
            } else { // is a main task
                makeSubtaskBtn.classList.remove('hidden');
                makeSubtaskBtn.onclick = () => openMakeSubtaskModal(itemId);
            }
        }


        taskModal.classList.remove('hidden');
        taskModal.classList.add('flex');
        setTimeout(() => taskModalContent.classList.add('modal-enter-active'), 10);
    }

    function closeEditTaskModal() {
        taskModalContent.classList.remove('modal-enter-active');
        taskModalContent.classList.add('modal-leave-active');
        setTimeout(() => {
            taskModal.classList.add('hidden');
            taskModal.classList.remove('flex');
            taskModalContent.classList.remove('modal-leave-active');
            editingItem = { id: null, isSubtask: false };
        }, 200);
    }

    function openMoveTaskModal(itemId) {
        movingTaskId = itemId;
        closeEditTaskModal(); 

        const projectSelect = document.getElementById('move-to-project-select');
        const parentTaskSelect = document.getElementById('move-to-parent-task-select');
        
        projectSelect.innerHTML = projects.map(p => `<option value="${p.id}">${p.name}</option>`).join('');

        const populateParentTasks = (projectId) => {
            const selectedProject = projects.find(p => p.id == projectId);
            parentTaskSelect.innerHTML = '<option value="">-- Jadikan Tugas Utama --</option>';
            if (selectedProject) {
                selectedProject.tasks.forEach(task => {
                    parentTaskSelect.innerHTML += `<option value="${task.id}">${task.name}</option>`;
                });
            }
        };
        
        populateParentTasks(projectSelect.value);
        projectSelect.onchange = () => populateParentTasks(projectSelect.value);

        const moveModal = document.getElementById('move-task-modal');
        const moveModalContent = document.getElementById('move-task-modal-content');
        moveModal.classList.remove('hidden');
        moveModal.classList.add('flex');
        setTimeout(() => moveModalContent.classList.add('modal-enter-active'), 10);
    }

    function closeMoveTaskModal() {
        const moveModal = document.getElementById('move-task-modal');
        const moveModalContent = document.getElementById('move-task-modal-content');
        moveModalContent.classList.remove('modal-enter-active');
        moveModalContent.classList.add('modal-leave-active');
        setTimeout(() => {
            moveModal.classList.add('hidden');
            moveModal.classList.remove('flex');
            moveModalContent.classList.remove('modal-leave-active');
            movingTaskId = null;
        }, 200);
    }
    
    function openMakeSubtaskModal(itemId) {
        const { item } = findItem(itemId);
        if (item.subtasks && item.subtasks.length > 0) {
            showNotificationModal("Aksi Ditolak", "Tugas ini tidak dapat dijadikan sub-tugas karena sudah memiliki sub-tugas di dalamnya.");
            return;
        }
        
        movingTaskId = itemId;
        closeEditTaskModal();

        const parentTaskSelect = document.getElementById('parent-task-select');
        parentTaskSelect.innerHTML = currentProject.tasks
            .filter(t => t.id !== itemId)
            .map(t => `<option value="${t.id}">${t.name}</option>`)
            .join('');

        const modal = document.getElementById('move-as-subtask-modal');
        modal.querySelector('h3').innerText = 'Jadikan Sub-tugas';
        modal.querySelector('button[type="submit"]').innerText = 'Pindahkan';

        const modalContent = document.getElementById('move-as-subtask-modal-content');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        setTimeout(() => modalContent.classList.add('modal-enter-active'), 10);
    }
    
    function openChangeParentModal(itemId) {
        movingTaskId = itemId;
        closeEditTaskModal();

        const { parent: currentParent } = findItem(itemId);

        const parentTaskSelect = document.getElementById('parent-task-select');
        parentTaskSelect.innerHTML = currentProject.tasks
            .filter(t => t.id !== currentParent.id)
            .map(t => `<option value="${t.id}">${t.name}</option>`)
            .join('');

        const modal = document.getElementById('move-as-subtask-modal');
        modal.querySelector('h3').innerText = 'Ubah Induk Tugas';
        modal.querySelector('button[type="submit"]').innerText = 'Pindahkan';

        const modalContent = document.getElementById('move-as-subtask-modal-content');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        setTimeout(() => modalContent.classList.add('modal-enter-active'), 10);
    }

     function closeMakeSubtaskModal() {
        const moveAsSubtaskModal = document.getElementById('move-as-subtask-modal');
        const moveAsSubtaskModalContent = document.getElementById('move-as-subtask-modal-content');
        moveAsSubtaskModalContent.classList.remove('modal-enter-active');
        moveAsSubtaskModalContent.classList.add('modal-leave-active');
        setTimeout(() => {
            moveAsSubtaskModal.classList.add('hidden');
            moveAsSubtaskModal.classList.remove('flex');
            moveAsSubtaskModalContent.classList.remove('modal-leave-active');
            movingTaskId = null;
        }, 200);
    }
    
    function handlePromoteToTask(itemId) {
        const { item: subtaskToMove, parent } = findItem(itemId);
        if (!subtaskToMove || !parent) return;

        const subtaskIndex = parent.subtasks.findIndex(st => st.id === itemId);
        if (subtaskIndex > -1) {
            parent.subtasks.splice(subtaskIndex, 1);
        }
        currentProject.tasks.push(subtaskToMove);
        
        closeEditTaskModal();
        renderCurrentView();
    }


    function handleMoveTaskSubmit(e) {
        e.preventDefault();
        if (!movingTaskId) return;

        const targetProjectId = parseInt(document.getElementById('move-to-project-select').value);
        const targetParentTaskId = document.getElementById('move-to-parent-task-select').value ? parseInt(document.getElementById('move-to-parent-task-select').value) : null;

        const taskIndex = timeBoxingTasks.findIndex(t => t.id === movingTaskId);
        if (taskIndex === -1) return;
        const [taskToMove] = timeBoxingTasks.splice(taskIndex, 1);

        taskToMove.id = generateNewId();

        const targetProject = projects.find(p => p.id === targetProjectId);
        if (!targetProject) return;

        if (targetParentTaskId) {
            const parentTask = targetProject.tasks.find(t => t.id === targetParentTaskId);
            if (parentTask) {
                if (!parentTask.subtasks) parentTask.subtasks = [];
                parentTask.subtasks.push(taskToMove);
            }
        } else {
            targetProject.tasks.push(taskToMove);
        }
        
        closeMoveTaskModal();
        renderTimeBoxingView();
    }

    function openDayTasksModal(dateString) {
        const date = parseDateAsUTC(dateString);
        document.getElementById('day-tasks-date').innerText = date.toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric', timeZone: 'UTC' });

        const taskSource = (currentContext === 'projects' && currentProject) ? currentProject.tasks : timeBoxingTasks;
        const flatTaskList = [];
        taskSource.forEach(task => {
            flatTaskList.push(task);
            if (showSubtasks && task.subtasks) flatTaskList.push(...task.subtasks);
        });

        const tasksOnDay = flatTaskList.filter(task => {
            const taskStart = parseDateAsUTC(task.startDate);
            const taskEnd = parseDateAsUTC(task.endDate);
            return date >= taskStart && date <= taskEnd;
        });

        const tasksListDiv = document.getElementById('day-tasks-list');
        tasksListDiv.innerHTML = tasksOnDay.map(task => {
            const statusInfo = taskStatusMap[task.status];
            return `
                <div class="p-3 bg-gray-50 rounded-md flex justify-between items-center">
                    <div>
                        <p class="font-semibold text-gray-800">${task.name}</p>
                        <p class="text-sm text-gray-500">${task.assignee} - 
                            <span class="font-medium ${statusInfo.text}">${task.status}</span>
                        </p>
                    </div>
                    <button class="text-sm text-blue-500 hover:underline" onclick="openEditTaskModalFromDayView(${task.id})">Edit</button>
                </div>
            `;
        }).join('');

        const dayTasksModal = document.getElementById('day-tasks-modal');
        const dayTasksModalContent = document.getElementById('day-tasks-modal-content');
        dayTasksModal.classList.remove('hidden');
        dayTasksModal.classList.add('flex');
        setTimeout(() => dayTasksModalContent.classList.add('modal-enter-active'), 10);
    }

    function closeDayTasksModal() {
        const dayTasksModal = document.getElementById('day-tasks-modal');
        const dayTasksModalContent = document.getElementById('day-tasks-modal-content');
        dayTasksModalContent.classList.remove('modal-enter-active');
        dayTasksModalContent.classList.add('modal-leave-active');
        setTimeout(() => {
            dayTasksModal.classList.add('hidden');
            dayTasksModal.classList.remove('flex');
            dayTasksModalContent.classList.remove('modal-leave-active');
        }, 200);
    }

    function openEditTaskModalFromDayView(taskId) {
        closeDayTasksModal();
        setTimeout(() => {
            openEditTaskModal(taskId);
        }, 200); 
    }
    
    function showNotificationModal(title, message) {
        document.getElementById('notification-title').innerText = title;
        document.getElementById('notification-message').innerText = message;
        const modal = document.getElementById('notification-modal');
        const modalContent = document.getElementById('notification-modal-content');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        setTimeout(() => modalContent.classList.add('modal-enter-active'), 10);
    }

    function closeNotificationModal() {
        const modal = document.getElementById('notification-modal');
        const modalContent = document.getElementById('notification-modal-content');
        modalContent.classList.remove('modal-enter-active');
        modalContent.classList.add('modal-leave-active');
        setTimeout(() => {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            modalContent.classList.remove('modal-leave-active');
        }, 200);
    }

    // --- INITIALIZATION ---
    document.addEventListener('DOMContentLoaded', () => {
        renderAllProjectsView();
        
        document.getElementById('nav-link-projects').addEventListener('click', (e) => {
            e.preventDefault();
            renderAllProjectsView();
        });
        document.getElementById('nav-link-timeboxing').addEventListener('click', (e) => {
            e.preventDefault();
            renderTimeBoxingView();
        });

        document.getElementById('cancel-edit').addEventListener('click', closeEditModal);
        document.getElementById('close-day-tasks-modal').addEventListener('click', closeDayTasksModal);
        document.getElementById('notification-ok-btn').addEventListener('click', closeNotificationModal);
        
        editProjectForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const projectToUpdate = projects.find(p => p.id === editingProjectId);
            if(projectToUpdate) {
                projectToUpdate.name = document.getElementById('projectName').value;
                projectToUpdate.startDate = document.getElementById('projectStartDate').value;
                projectToUpdate.endDate = document.getElementById('projectEndDate').value;
                projectToUpdate.status = document.getElementById('projectStatus').value;
            }
            renderAllProjectsView(); 
            closeEditModal();
        });

        document.getElementById('cancel-task-edit').addEventListener('click', closeEditTaskModal);
        editTaskForm.addEventListener('submit', (e) => {
            e.preventDefault();
            if (!editingItem.id) return;
            const { item } = findItem(editingItem.id);
            if (item) {
                item.name = document.getElementById('taskName').value;
                item.assignee = document.getElementById('taskAssignee').value;
                item.startDate = document.getElementById('taskStartDate').value;
                item.endDate = document.getElementById('taskEndDate').value;
            }
            closeEditTaskModal();
            renderCurrentView();
        });
        
        document.getElementById('move-task-form').addEventListener('submit', handleMoveTaskSubmit);
        document.getElementById('cancel-move-task').addEventListener('click', closeMoveTaskModal);

        document.getElementById('move-as-subtask-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const newParentTaskId = parseInt(document.getElementById('parent-task-select').value);
            if (!movingTaskId || !newParentTaskId) return;

            const { item: itemToMove, isSubtask, parent: oldParent } = findItem(movingTaskId);
            const newParentTask = currentProject.tasks.find(t => t.id === newParentTaskId);

            if (isSubtask) { // Moving a subtask to another parent
                if (oldParent) {
                    const subtaskIndex = oldParent.subtasks.findIndex(st => st.id === movingTaskId);
                    if (subtaskIndex > -1) {
                        oldParent.subtasks.splice(subtaskIndex, 1);
                    }
                }
            } else { // Moving a main task to be a subtask
                const taskIndex = currentProject.tasks.findIndex(t => t.id === movingTaskId);
                if (taskIndex > -1) {
                    currentProject.tasks.splice(taskIndex, 1);
                }
            }
            
            if (!newParentTask.subtasks) newParentTask.subtasks = [];
            newParentTask.subtasks.push(itemToMove);

            closeMakeSubtaskModal();
            renderCurrentView();
        });
        document.getElementById('cancel-move-as-subtask').addEventListener('click', closeMakeSubtaskModal);
    });
</script>

</body>
</html>

